# Generated by Django 4.2.9 on 2025-10-02 23:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from pgvector.django import VectorField


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('documents', '0012_enable_pgvector'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Ожидает обработки'), ('processing', 'Обрабатывается'), ('completed', 'Завершено'), ('failed', 'Ошибка')], default='pending', max_length=20)),
                ('total_documents', models.IntegerField(default=0)),
                ('processed_documents', models.IntegerField(default=0)),
                ('failed_documents', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'document_batches',
            },
        ),
        migrations.CreateModel(
            name='DocumentVector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vector', VectorField(blank=True, dimensions=384, null=True)),
                ('normalized_vector', VectorField(blank=True, dimensions=384, null=True)),
                ('vector_norm', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='document_vector', to='documents.document')),
            ],
            options={
                'db_table': 'document_vectors',
                'indexes': [models.Index(fields=['created_at'], name='vector_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='DocumentSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cosine_similarity', models.FloatField()),
                ('jaccard_similarity', models.FloatField()),
                ('dice_similarity', models.FloatField()),
                ('levenshtein_similarity', models.FloatField()),
                ('weighted_similarity', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_paraphrasing', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('document1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_doc1', to='documents.document')),
                ('document2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_doc2', to='documents.document')),
            ],
            options={
                'db_table': 'document_similarities',
                'indexes': [models.Index(fields=['weighted_similarity'], name='similarity_weighted_idx'), models.Index(fields=['cosine_similarity'], name='similarity_cosine_idx'), models.Index(fields=['created_at'], name='similarity_created_idx')],
                'unique_together': {('document1', 'document2')},
            },
        ),
        migrations.CreateModel(
            name='DocumentProcessingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(choices=[(1, 'Низкий'), (2, 'Средний'), (3, 'Высокий'), (4, 'Критический')], default=2)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='documents.documentbatch')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documents.document')),
            ],
            options={
                'db_table': 'document_processing_queue',
                'ordering': ['-priority', 'created_at'],
                'indexes': [models.Index(fields=['status', 'priority'], name='queue_status_priority_idx'), models.Index(fields=['created_at'], name='queue_created_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='documentbatch',
            index=models.Index(fields=['status'], name='batch_status_idx'),
        ),
        migrations.AddIndex(
            model_name='documentbatch',
            index=models.Index(fields=['created_at'], name='batch_created_idx'),
        ),
    ]
